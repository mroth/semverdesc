package describer

import (
	"reflect"
	"testing"

	"github.com/mroth/semverdesc"
)

func Test_parsePDescribe(t *testing.T) {
	tests := []struct {
		name    string
		output  []byte
		want    *semverdesc.DescribeResults
		wantErr bool
	}{
		{
			name:   "exact match",
			output: []byte("v0.3.0-0-g56dc2041f2c45ab15d41e63058c1c44fff905e81"),
			want: &semverdesc.DescribeResults{
				TagName: "v0.3.0",
				Ahead:   0,
				HashStr: "56dc2041f2c45ab15d41e63058c1c44fff905e81",
				Dirty:   false,
			},
			wantErr: false,
		},
		{
			name:   "typical case",
			output: []byte("v1.2.3-13-g56dc2041f2c45ab15d41e63058c1c44fff905e81"),
			want: &semverdesc.DescribeResults{
				TagName: "v1.2.3",
				Ahead:   13,
				HashStr: "56dc2041f2c45ab15d41e63058c1c44fff905e81",
				Dirty:   false,
			},
			wantErr: false,
		},
		{
			name:   "dirty workdir",
			output: []byte("v1.2.3-13-g56dc2041f2c45ab15d41e63058c1c44fff905e81-dirty"),
			want: &semverdesc.DescribeResults{
				TagName: "v1.2.3",
				Ahead:   13,
				HashStr: "56dc2041f2c45ab15d41e63058c1c44fff905e81",
				Dirty:   true,
			},
			wantErr: false,
		},
		{
			name:   "describe -all and branch with a dash",
			output: []byte("refs/heads/aruba-update-2-g56dc2041f2c45ab15d41e63058c1c44fff905e81"),
			want: &semverdesc.DescribeResults{
				TagName: "refs/heads/aruba-update",
				Ahead:   2,
				HashStr: "56dc2041f2c45ab15d41e63058c1c44fff905e81",
				Dirty:   false,
			},
			wantErr: false,
		},
		{
			name:    "something that wasnt generated by out predictable options",
			output:  []byte("v1.2.3-13-g1234567"),
			want:    nil,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := parsePDescribe(tt.output)
			if (err != nil) != tt.wantErr {
				t.Errorf("parsePDescribe() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("parsePDescribe() = %v, want %v", got, tt.want)
			}
		})
	}
}
